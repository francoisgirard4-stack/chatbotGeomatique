# -*- coding: utf-8 -*-
"""
Assistant p√©dagogique en g√©omatique ‚Äì Universit√© de Montr√©al
Streamlit chatbot pour les cours GEO1532 (1re ann√©e) et GEO2512 (2e ann√©e)
Charge les contenus depuis ./docs/ (PDF, DOCX, PPTX) et r√©pond aux questions.
Inclut : Mode administrateur (corrections) et Mode quiz (50 questions).
"""

import os
import random
import streamlit as st

# --- Imports LangChain (compatibles avec versions r√©centes) ---
try:
    from langchain_openai import ChatOpenAI, OpenAIEmbeddings
except Exception:
    # Compat r√©tro si ancien LangChain
    from langchain.chat_models import ChatOpenAI  # type: ignore
    from langchain.embeddings import OpenAIEmbeddings  # type: ignore

try:
    from langchain_community.vectorstores import FAISS
    from langchain_community.document_loaders import (
        PyPDFLoader,
        UnstructuredWordDocumentLoader,
        UnstructuredPowerPointLoader,
    )
except Exception:
    # Compat r√©tro
    from langchain.vectorstores import FAISS  # type: ignore
    from langchain.document_loaders import (  # type: ignore
        PyPDFLoader,
        UnstructuredWordDocumentLoader,
        UnstructuredPowerPointLoader,
    )

from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain.chains import ConversationalRetrievalChain


# ---------------------------
# CONFIGURATION
# ---------------------------

st.set_page_config(page_title="Assistant G√©omatique UdeM", page_icon="üó∫Ô∏è", layout="wide")

st.title("üó∫Ô∏è Assistant p√©dagogique en g√©omatique ‚Äì Universit√© de Montr√©al")
st.markdown(
    """
Cet assistant aide les √©tudiants √† comprendre les concepts de **cartographie**, **SIG**, **GNSS**,
**projections** et **analyses spatiales**.

**Sources int√©gr√©es** (d√©posez vos fichiers dans `./docs/`) :
- Cours 1re et 2e ann√©e (PowerPoint)  
- Travaux pratiques (GEO1532 & GEO2512)  
- Livre *GIS Fundamentals* (Bolstad, 5e √©d.)

Posez une question : *¬´ Quelle est la diff√©rence entre raster et vecteur ? ¬ª*, *¬´ Comment g√©or√©f√©rencer une carte ? ¬ª*, etc.
"""
)

if os.getenv("OPENAI_API_KEY") in (None, "", "changeme"):
    st.warning(
        "‚ö†Ô∏è La variable d'environnement **OPENAI_API_KEY** n'est pas d√©finie. "
        "Ajoutez votre cl√© pour activer le moteur de r√©ponses."
    )

# ---------------------------
# CHARGEMENT DES DOCUMENTS (dossier ./docs)
# ---------------------------

@st.cache_resource(show_spinner=False)
def load_docs():
    docs = []
    base_path = os.path.join(os.getcwd(), "docs")

    if not os.path.exists(base_path):
        st.error(
            f"Le dossier `{base_path}` est introuvable. "
            "Cr√©ez un dossier `./docs` et placez-y vos fichiers (.pdf, .docx, .pptx)."
        )
        return []

    files = [f for f in os.listdir(base_path) if f.lower().endswith((".pdf", ".docx", ".pptx"))]
    if not files:
        st.warning("Aucun fichier d√©tect√© dans `./docs`. "
                   "Veuillez y placer vos documents de cours puis recharger l'application.")
        return []

    for f in files:
        path = os.path.join(base_path, f)
        try:
            if f.lower().endswith(".pdf"):
                loader = PyPDFLoader(path)
            elif f.lower().endswith(".docx"):
                loader = UnstructuredWordDocumentLoader(path)
            elif f.lower().endswith(".pptx"):
                loader = UnstructuredPowerPointLoader(path)
            else:
                continue
            docs.extend(loader.load())
        except Exception as e:
            st.warning(f"Erreur lors du chargement de `{f}` : {e}")
    return docs


documents = load_docs()
if not documents:
    st.stop()

# D√©coupage pour index (chunks)
text_splitter = RecursiveCharacterTextSplitter(chunk_size=1500, chunk_overlap=150)
texts = text_splitter.split_documents(documents)

# ---------------------------
# CR√âATION DE L'INDEX VECTORIEL
# ---------------------------

@st.cache_resource(show_spinner=False)
def create_vectorstore(texts):
    embeddings = OpenAIEmbeddings()
    vectorstore = FAISS.from_documents(texts, embeddings)
    return vectorstore

vectorstore = create_vectorstore(texts)
retriever = vectorstore.as_retriever(search_kwargs={"k": 4})

# ---------------------------
# CHA√éNE CONVERSATIONNELLE
# ---------------------------

# Mod√®le raisonnable c√¥t√© co√ªt/latence, FR par d√©faut.
llm = ChatOpenAI(model="gpt-4o-mini", temperature=0.4)
qa_chain = ConversationalRetrievalChain.from_llm(llm, retriever=retriever)

# ---------------------------
# √âTAT & BARRE LAT√âRALE
# ---------------------------

if "history" not in st.session_state:
    st.session_state["history"] = []

st.sidebar.header("‚öôÔ∏è Mode d‚Äôadministration")
admin_mode = st.sidebar.checkbox("Activer le mode administrateur")
quiz_mode = st.sidebar.checkbox("Activer le mode quiz √©tudiant")

# ---------------------------
# MODE ADMINISTRATEUR
# ---------------------------

if admin_mode:
    st.markdown("### üîß Mode administrateur activ√©")
    st.info("Ajoutez/retirez des fichiers directement dans `./docs`. "
            "Vous pouvez aussi corriger une r√©ponse via le formulaire ci-dessous.")

    st.sidebar.subheader("Corriger ou enrichir une r√©ponse")
    correction_q = st.sidebar.text_area("Question √† corriger")
    correction_a = st.sidebar.text_area("Nouvelle r√©ponse ou note explicative")
    if st.sidebar.button("Enregistrer la correction"):
        st.session_state["history"].append((correction_q, f"[R√©vision enseignant] {correction_a}"))
        st.success("R√©vision ajout√©e √† l'historique.")

# ---------------------------
# MODE QUIZ ‚Äì 50 QUESTIONS
# ---------------------------

QUIZ_QUESTIONS = [
    ("Diff√©rence principale entre mod√®le raster et vectoriel ?", "Raster: cellules; Vecteur: entit√©s g√©om√©triques."),
    ("Projection qui conserve les angles mais d√©forme les surfaces ?", "Conforme (ex. Mercator)."),
    ("Projection qui conserve les surfaces mais d√©forme les formes ?", "√âquivalente (ex. Albers)."),
    ("M√©thode d'interpolation par moyenne pond√©r√©e par la distance ?", "IDW."),
    ("Syst√®me GNSS europ√©en ?", "Galileo."),
    ("R√¥le du g√©or√©f√©rencement ?", "Associer une image √† des coordonn√©es r√©elles."),
    ("Diff√©rence MNA vs MNT ?", "MNA inclut objets; MNT = terrain nu."),
    ("Format couramment associ√© au vecteur ?", "Shapefile (.shp)."),
    ("Que mesure l‚Äôindicatrice de Tissot ?", "D√©formations locales de projection."),
    ("Qu‚Äôest-ce qu‚Äôun buffer ?", "Zone tampon autour d‚Äôune entit√©."),
    ("Diff√©rence IDW vs krigeage ?", "Krigeage utilise un variogramme statistique."),
    ("D√©finition base de donn√©es relationnelle ?", "Tables reli√©es par cl√©s primaires/√©trang√®res."),
    ("Outil pour automatiser des traitements SIG ?", "Model Builder."),
    ("Projections usuelles au Qu√©bec (topo) ?", "UTM / MTM."),
    ("D√©clinaison magn√©tique ?", "Angle entre nord g√©ographique et nord magn√©tique."),
    ("GNSS signifie ?", "Global Navigation Satellite System."),
    ("Classification en intervalles √©gaux ?", "√âgal-intervalle."),
    ("Principe de l‚Äôanalyse multicrit√®re ?", "Combinaison de couches pond√©r√©es."),
    ("Projection conique √©quivalente avec 2 parall√®les standards ?", "Albers √©gale surface."),
    ("Diff√©rence GPS vs GNSS ?", "GPS = am√©ricain; GNSS = tous syst√®mes."),
    ("Analyse pour zones d‚Äôaccessibilit√© ?", "Analyse de r√©seaux."),
    ("WGS84 ?", "Datum g√©od√©sique mondial (1984)."),
    ("Calcul de pente √† partir d‚Äôun MNT ?", "Outil Slope."),
    ("Projection √©quivalente utilis√©e pour le Canada ?", "Albers √©gale surface."),
    ("Op√©ration spatiale par intersection ?", "Intersect."),
    ("Donn√©e pour courbes de niveau (QC/CA) ?", "BNDT (ou √©quivalents)."),
    ("Estim. volume de carri√®re ?", "Diff√©rence entre MNT (Cut/Fill)."),
    ("Organigramme SIG ?", "Repr√©sentation des √©tapes d‚Äôun traitement."),
    ("Extraction zone par masque (raster) ?", "Extract by Mask."),
    ("Variable visuelle pour hi√©rarchie ?", "Taille / valeur (luminosit√©)."),
    ("Autocorr√©lation spatiale positive ?", "Valeurs similaires proches."),
    ("Formule DMS ‚Üí degr√©s d√©cimaux ?", "D + M/60 + S/3600."),
    ("Table attributaire ?", "Donn√©es descriptives des entit√©s."),
    ("√âchelle raisonnable carte Qu√©bec ?", "‚âà 1:1 000 000."),
    ("Taille de pixel Landsat 8 ?", "30 m (bandes r√©flectives)."),
    ("Raster vs LiDAR ?", "Raster = grille; LiDAR = nuage de points XYZ."),
    ("Formats raster courants ?", ".tif, .img."),
    ("Variogramme, utilit√© ?", "Mesure d√©pendance spatiale."),
    ("RMSE ?", "Erreur quadratique moyenne."),
    ("Reclassification ?", "Transformation des valeurs d‚Äôun raster en classes."),
    ("S√©lection attributaire dans QGIS ?", "S√©lection par expression."),
    ("Jointure attributaire ?", "Relier table externe par cl√© commune."),
    ("Topologie (vecteur) ?", "Relations spatiales entre entit√©s (adjacency/connectivit√©)."),
    ("SIG ‚Äì composantes ?", "Logiciel, mat√©riel, donn√©es, m√©thodes, utilisateurs."),
    ("Syst√®mes de coordonn√©es courants ?", "G√©ographiques (lat/long), projet√©s (UTM/MTM)."),
    ("Azimut ?", "Angle mesur√© depuis le nord, dans le sens horaire."),
    ("√âchantillonnage pour interpolation ?", "Repr√©sentatif, couvrant gradients & extr√™mes."),
    ("LISA ?", "Indicateurs locaux d‚Äôassociation spatiale."),
    ("Moran I ?", "Mesure globale d‚Äôautocorr√©lation spatiale."),
]

if quiz_mode:
    st.header("üéØ Quiz interactif ‚Äì Teste tes connaissances en g√©omatique !")
    question, expected = random.choice(QUIZ_QUESTIONS)
    st.subheader(question)
    answer = st.text_input("Ta r√©ponse :")
    if st.button("V√©rifier"):
        st.markdown(f"**R√©ponse attendue :** {expected}")
        st.success("Bien jou√© ‚Äî continue tes apprentissages !")

# ---------------------------
# MODE CONVERSATIONNEL
# ---------------------------

if not quiz_mode:
    user_query = st.text_input("üí¨ Pose ta question sur la g√©omatique :")
    if user_query:
        with st.spinner("R√©flexion en cours..."):
            response = qa_chain({"question": user_query, "chat_history": st.session_state["history"]})
            answer = response["answer"]
            st.session_state["history"].append((user_query, answer))
            st.markdown(f"### üß† R√©ponse\n{answer}")

# ---------------------------
# HISTORIQUE
# ---------------------------

if st.session_state["history"]:
    with st.expander("üïò Historique des questions"):
        for q, a in reversed(st.session_state["history"]):
            st.markdown(f"**Q :** {q}\n\n**R :** {a}\n---")
